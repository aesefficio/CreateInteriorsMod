plugins {
    id "dev.architectury.loom" version "1.3-SNAPSHOT"
    id "maven-publish"
    id 'io.github.juuxel.loom-vineflower' version "${vineflower_version}"
    id 'io.github.p03w.machete' version '2.0.1'
}

base {
    archivesName = project.archives_base_name
}

version = project.mod_version
archivesBaseName = project.archives_base_name
String buildNumber = System.getenv("GITHUB_RUN_NUMBER")
group = project.maven_group

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

def generatedResources = file('src/generated/resources')

sourceSets.main.resources {
    srcDir(generatedResources)
    exclude '.cache/'
}


loom {
    // use this if you are using the official mojang mappings
    // and want loom to stop warning you about their license
    silentMojangMappingsLicense()
    forge {
        mixinConfig "interiors.mixins.json"
    }
    runs {
        data {
            data()
            programArgs '--mod', 'interiors'
            programArg '--all'
            programArgs '--output', generatedResources.absolutePath
            programArgs '--existing', file('src/main/resources/').absolutePath
            programArgs '--existing-mod', 'create'
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://maven.parchmentmc.org' }
    maven { url 'https://maven.quiltmc.org/repository/release' }
    maven { url 'https://maven.blamejared.com/' }
    maven { url 'https://maven.neoforged.net/releases/' }

    maven {
        url 'https://maven.tterrag.com/'
        content {
            includeGroup 'com.jozufozu.flywheel'
            includeGroup 'com.tterrag.registrate'
            includeGroup 'com.simibubi.create'
        }
    }
    maven {
        url 'https://api.modrinth.com/maven'
        content { includeGroup 'maven.modrinth' }
    }
    maven {
        url 'https://www.cursemaven.com'
        content { includeGroup 'curse.maven' }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings loom.officialMojangMappings()

    forge "net.minecraftforge:forge:${project.forge_version}"

    modImplementation "com.tterrag.registrate:Registrate:${registrate_version}"
    modImplementation("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }
    modImplementation "com.jozufozu.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}"

    // JEI
    modCompileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    modCompileOnly "mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"
    modLocalRuntime("mezz.jei:jei-${minecraft_version}-forge:${jei_version}") { transitive = false }
}

processResources {
    // define properties that can be used during resource processing
    inputs.property "version", project.version

    // this will replace the property "${version}" in your mods.toml
    // with the version you've defined in your gradle.properties
    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
    exclude 'assets/create.zip'
    exclude 'assets/create'
}

machete { enabled = buildNumber != null }

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.release = 17
}

java {
    withSourcesJar()
}

jar {
    // add some additional metadata to the jar manifest
    manifest {
        attributes([
                "Specification-Title"   : project.mod_id,
                "Specification-Vendor"  : project.mod_author,
                "Specification-Version" : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version": version,
                "Implementation-Vendor" : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
